<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>

<# int minItems = 2; #>
<# int maxItems = 16; #>

using System.Collections.Generic;
using JJ.Framework.Exceptions;
using JJ.Business.Synthesizer.Calculation.Operators;

namespace JJ.Business.Synthesizer.Helpers
{
    internal static partial class OperatorCalculatorFactory
    {
	    public static OperatorCalculatorBase CreateMultiplyCalculator_Vars(IList<OperatorCalculatorBase> itemCalculators)
        {
			if (itemCalculators.Count < <#= minItems #>) throw new LessThanException(() => itemCalculators.Count, <#= minItems #>);

            switch (itemCalculators.Count)
            {
<#
	for (int i = minItems; i <= maxItems; i++)
	{
#>
                case <#= i #>:
                    return new Multiply_OperatorCalculator_<#= i #>Vars
					(
<#
		for (int j = 0; j < i; j++)
		{
#>
						itemCalculators[<#=j#>]<#
						if (j != i - 1) Write(",");#>

<#
		}
#>
					);
<#
	}
#>
                default:
                    return new Multiply_OperatorCalculator_VarArray(itemCalculators);
            }
        }
	}
}
