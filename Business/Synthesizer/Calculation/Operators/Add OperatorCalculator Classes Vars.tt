<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>

<#@ output extension=".cs" #>

<# int minItems = 2; #>
<# int maxItems = 32; #>

using JJ.Framework.Exceptions;

namespace JJ.Business.Synthesizer.Calculation.Operators
{

<# 
	for (int i = minItems; i <= maxItems; i++)
	{
#>
		internal class Add_OperatorCalculator_<#= i #>Vars : OperatorCalculatorBase_WithChildCalculators
		{
<# 
			for (int j = 1; j <= i; j++)
			{
#>
				private readonly OperatorCalculatorBase _itemCalculator<#= j #>;
<# 
			}
#>
			
			public Add_OperatorCalculator_<#= i #>Vars(
<#
				for (int j = 1; j <= i; j++)
				{
#>
					OperatorCalculatorBase itemCalculator<#= j #>
<#
					if (j != i)
					{
						Write(",");
					}
					else
					{
						Write(")");
					}
				}
#>
			: base
			(new [] { 
<#
				for (int j = 1; j <= i; j++)
				{
#>
					itemCalculator<#= j #>
<#
					if (j != i)
					{
						Write(",");
					}
				}
#>
			})
			{
<#
				for (int j = 1; j <= i; j++)
				{
#>
					_itemCalculator<#= j #> = itemCalculator<#= j #> ?? throw new NullException(() => itemCalculator<#= j #>);
<#
				}
#>
			}
			 
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
			public override double Calculate()
			{
				return 
<#
					for (int j = 1; j <= i; j++)
					{
#>
						_itemCalculator<#= j #>.Calculate()
<#
						if (j != i)
						{
							Write("+");
						}
						else
						{
							Write(";");
						}
					}
#>
			}
		}
<# 
	}
#>
}
