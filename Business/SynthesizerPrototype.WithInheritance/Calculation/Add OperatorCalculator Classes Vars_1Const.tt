<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>

<#@ output extension=".cs" #>

<# int minVarOperands = 1; #>
<# int maxVarOperands = 31; #>

using JJ.Framework.Exceptions.Basic;

namespace JJ.Business.SynthesizerPrototype.WithInheritance.Calculation
{

<# 
	for (int i = minVarOperands; i <= maxVarOperands; i++)
	{
#>
		internal class Add_OperatorCalculator_<#= i #>Vars_1Const : OperatorCalculatorBase
		{
<# 
			for (int j = 1; j <= i; j++)
			{
#>
				private readonly OperatorCalculatorBase _operandCalculator<#= j #>;
<# 
			}
#>
			private readonly double _constValue;
			
			public Add_OperatorCalculator_<#= i #>Vars_1Const(
<#
				for (int j = 1; j <= i; j++)
				{
#>
					OperatorCalculatorBase operandCalculator<#= j #>,
<#
				}
#>
				double constValue)
			{
<#
				for (int j = 1; j <= i; j++)
				{
#>
					_operandCalculator<#= j #> = operandCalculator<#= j #> ?? throw new NullException(() => operandCalculator<#= j #>);
<#
				}
#>
				_constValue = constValue;
			}
			 
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
			public override double Calculate()
				=> _constValue +
<#
				for (int j = 1; j <= i; j++)
				{
#>
					_operandCalculator<#= j #>.Calculate()
<#
					if (j != i)
					{
						Write("+");
					}
					else
					{
						Write(";");
					}
				}
#>
		}
<# 
	}
#>
}
