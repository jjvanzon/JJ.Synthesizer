<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotDeleteCurveBecauseHasOperators" xml:space="preserve">
    <value>Curve '{0}' cannot be deleted, because it is being used by operators.</value>
    <comment>{0} = name</comment>
  </data>
  <data name="CannotDeleteSampleBecauseHasOperators" xml:space="preserve">
    <value>Sample '{0}' cannot be deleted, because it is being used by operators.</value>
    <comment>{0} = name</comment>
  </data>
  <data name="ChannelCountDoesNotMatchSpeakerSetup" xml:space="preserve">
    <value>Channel count does not match speaker setup.</value>
  </data>
  <data name="ChannelIndexNumberDoesNotMatchSpeakerSetup" xml:space="preserve">
    <value>Channel number does not match speaker setup.</value>
  </data>
  <data name="UnderlyingPatchIsCircular" xml:space="preserve">
    <value>There is a circular dependency with its underlying patch.</value>
    <comment>{0} = name</comment>
  </data>
  <data name="DocumentIsDependentOnDocument" xml:space="preserve">
    <value>Document '{0}' is dependent on document '{1}'.</value>
    <comment>{0} = dependent document, {1} = dependent on document</comment>
  </data>
  <data name="InletNamesAreNotUnique" xml:space="preserve">
    <value>Inlet names are not unique.</value>
  </data>
  <data name="InletNotSet" xml:space="preserve">
    <value>{0} operator named '{1}' does not have {2} filled in.</value>
    <comment>{0} = Operator type name. {1} = Operator name. {2} = Operand name.</comment>
  </data>
  <data name="NotFoundInList_WithItemName_AndID" xml:space="preserve">
    <value>{0} with ID '{1}' not found in the list.</value>
    <comment>{0} = name, {1} = id</comment>
  </data>
  <data name="NotFoundInList_WithItemName_ID_AndListName" xml:space="preserve">
    <value>{0} with ID '{1}' not found in the list of {2}.</value>
    <comment>{0} = name, {1} = id, {2} = name plural</comment>
  </data>
  <data name="NotFound_WithTypeName_AndName" xml:space="preserve">
    <value>{0} named '{1}' not found.</value>
    <comment>{0} = type of object, e.g. 'Recipe', {1} = name of object, e.g. 'eggs and bacon'</comment>
  </data>
  <data name="ObjectAmplifier0" xml:space="preserve">
    <value>Amplifier of '{0}' named '{1}' is 0.</value>
    <comment>{0} = Object type name. {1} = Object name.</comment>
  </data>
  <data name="OperatorIsCircularWithName" xml:space="preserve">
    <value>Operator named '{0}' has a circular reference.</value>
  </data>
  <data name="OperatorPatchIsNotTheExpectedPatch" xml:space="preserve">
    <value>The patch of operator '{0}' is filled in, but it is not the expected patch '{1}'.</value>
    <comment>{0} = operator name, {1} = patch name</comment>
  </data>
  <data name="OutletNamesAreNotUnique" xml:space="preserve">
    <value>Outlet names are not unique.</value>
  </data>
  <data name="SampleCount0" xml:space="preserve">
    <value>Sample '{0}' has no data.</value>
    <comment>{0} = sample name</comment>
  </data>
  <data name="SampleNotActive" xml:space="preserve">
    <value>Sample named '{0}' is not active.</value>
    <comment>{0} = Sample name.</comment>
  </data>
  <data name="SampleNotLoaded" xml:space="preserve">
    <value>Sample '{0}' is not loaded.</value>
    <comment>{0} = sample name</comment>
  </data>
  <data name="UnsupportedOperatorTypeEnumValue" xml:space="preserve">
    <value>Operator type '{0}' is not supported.</value>
    <comment>{0} = number or name</comment>
  </data>
  <data name="NumberIs0WithName" xml:space="preserve">
    <value>Number named '{0}' is 0.</value>
    <comment>{0} = Value operator name.</comment>
  </data>
  <data name="InletListIndexesAreNotUnique" xml:space="preserve">
    <value>Inlet numbers are not unique.</value>
  </data>
  <data name="OutletListIndexesAreNotUnique" xml:space="preserve">
    <value>Outlet list indexes are not unique.</value>
  </data>
  <data name="CannotDeleteBecauseHasReferences" xml:space="preserve">
    <value>Cannot delete item, because there are things still linking to it.</value>
  </data>
  <data name="ScaleNamesNotUnique" xml:space="preserve">
    <value>Scale names are not unique.</value>
  </data>
  <data name="OperatorHasNoInletsFilledIn_WithOperatorName" xml:space="preserve">
    <value>Operator '{0}' has no inlets filled in.</value>
    <comment>{0} = name or type of object</comment>
  </data>
  <data name="OperatorHasNoInletFilledIn_WithOperatorName" xml:space="preserve">
    <value>Operator '{0}' has no inlet filled in.</value>
    <comment>{0} = name or type of object</comment>
  </data>
  <data name="OperatorTypeMustBeAdderOrBundle" xml:space="preserve">
    <value>Operator type must be 'Adder' or 'Bundle'.</value>
  </data>
  <data name="CannotChangeInletCountBecauseOneIsStillFilledIn" xml:space="preserve">
    <value>Cannot change the amount of inlets, because inlet {0} is still filled in.</value>
    <comment>{0} = number</comment>
  </data>
  <data name="OperatorTypeMustBeOfType" xml:space="preserve">
    <value>Operator type must be '{0}'.</value>
    <comment>{0} = operator type name</comment>
  </data>
  <data name="CannotChangeOutletCountBecauseOneIsStillFilledIn" xml:space="preserve">
    <value>Cannot change the amount of outlets, because outlet {0} is still in use.</value>
    <comment>{0} = number</comment>
  </data>
  <data name="NamesNotUnique_WithEntityTypeNameAndNames" xml:space="preserve">
    <value>{0} names are not unique. Duplicate names: {1}.</value>
    <comment>{0} = object type singular, e.g. 'Scale', {1} = comma separated list of names</comment>
  </data>
  <data name="NotUnique_WithPropertyName_AndValue" xml:space="preserve">
    <value>{0} '{1}' is not unique.</value>
    <comment>{0} = property, {1} = value</comment>
  </data>
  <data name="InletTypeNotFoundInUnderlyingPatch" xml:space="preserve">
    <value>Inlet type '{0}' not found in underlying patch.</value>
    <comment>{0} = inlet type, e.g. 'Signal' or 'Frequency'.</comment>
  </data>
  <data name="OutletTypeNotFoundInUnderlyingPatch" xml:space="preserve">
    <value>Outlet type '{0}' not found in underlying patch.</value>
    <comment>{0} = outlet type, e.g. 'Signal' or 'Frequencies'.</comment>
  </data>
  <data name="InletDefaultValueDoesNotMatchWithUnderlyingPatch" xml:space="preserve">
    <value>Default value of inlet '{0}' does not match with underlying patch.</value>
    <comment>{0} = inlet name</comment>
  </data>
</root>