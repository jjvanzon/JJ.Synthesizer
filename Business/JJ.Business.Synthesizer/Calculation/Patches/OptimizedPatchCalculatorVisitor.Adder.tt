<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<# int maxAddOperands = 32; #>

using JJ.Data.Synthesizer;
using System;
using System.Collections.Generic;
using System.Linq;
using JJ.Framework.Reflection.Exceptions;
using JJ.Business.Synthesizer.Calculation.Operators;

namespace JJ.Business.Synthesizer.Calculation.Patches
{
    internal partial class OptimizedPatchCalculatorVisitor
    {
	    private OperatorCalculatorBase CreateAddCalculator_WithThreeOrMoreOperands(IList<OperatorCalculatorBase> operandCalculators)
        {
			if (operandCalculators.Count < 3) throw new LessThanException(() => operandCalculators.Count, 3);

            switch (operandCalculators.Count)
            {
<#
	for (int i = 3; i <= maxAddOperands; i++)
	{
#>
                case <#= i #>:
                    return new Add_OperatorCalculator<#= i #>
					(
<#
		for (int j = 0; j < i; j++)
		{
#>
						operandCalculators[<#=j#>]<#
						if (j != i - 1) Write(",");#>
<#
		}
#>
					);
<#
	}
#>
                default:
                    return new Add_OperatorCalculator(operandCalculators.ToArray());
            }
        }
	}
}
