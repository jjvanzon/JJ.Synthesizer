<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ output extension=".cs" #>

<# int minOperands = 2; #>
<# int maxOperands = 8; #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using JJ.Framework.Reflection.Exceptions;

namespace JJ.Demos.Synthesizer.NanoOptimization.Calculation.Operators.WithStructs
{

<# 
	for (int i = minOperands; i <= maxOperands; i++)
	{
#>
		internal class Add_OperatorCalculator_<#= i #>Vars
			<
<#
				for (int j = 1; j <= i; j++)
				{
#>
					TChildCalculator<#= j #>
<#				
					if (i != j) Write(",");
				}
#>
			>
			: IOperatorCalculator_<#= i #>Vars, IOperatorCalculator_Vars
<#
			for (int j = 1; j <= i; j++)
			{
#>
				where TChildCalculator<#= j #> : IOperatorCalculator
<#
			}
#>

		{
<# 
			for (int j = 1; j <= i; j++)
			{
#>
				private readonly TChildCalculator<#= j #> _operandCalculator<#= j #>;
<# 
			}

			for (int j = 1; j <= i; j++)
			{
#>

				private TChildCalculator<#= j #> _calculator<#= j #>;
				public IOperatorCalculator Calculator<#= j #>
				{
					get { return _calculator<#= j #>; }
					set { _calculator<#= j #> = (TChildCalculator<#= j #>)value; }
				}
<#
			}
#>
			public void SetVarCalculator(int i, IOperatorCalculator varOperatorCalculator)
			{
				switch (i)
				{
<#
					for (int j = 1; j <= i; j++)
					{
#>
						case <#= j - 1 #>:
							_calculator<#= j #> = (TChildCalculator<#= j #>)varOperatorCalculator;
							break;

<#
					}
#>

						default:
							throw new Exception(String.Format("i {0} not valid.", i));
				}
			}

			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
			public double Calculate()
			{
				return 
<#
					for (int j = 1; j <= i; j++)
					{
#>
						_calculator<#= j #>.Calculate()
<#
						if (j != i)
						{
							Write("+");
						}
						else
						{
							Write(";");
						}
					}
#>
			}
		}
<# 
	}
#>
}
