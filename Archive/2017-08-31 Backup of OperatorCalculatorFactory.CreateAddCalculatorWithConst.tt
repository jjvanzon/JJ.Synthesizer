<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>

<# int minVarItems = 1; #>
<# int maxVarItems = 31; #>

/*
using System.Collections.Generic;
using JJ.Framework.Exceptions;
using JJ.Business.Synthesizer.Calculation.Operators;

namespace JJ.Business.Synthesizer.Helpers
{
    internal static partial class OperatorCalculatorFactory
    {
	    public static OperatorCalculatorBase CreateAddCalculator_Vars_1Const(IList<OperatorCalculatorBase> varItemCalculators, double constValue)
        {
			if (varItemCalculators.Count < <#= minVarItems #>) throw new LessThanException(() => varItemCalculators.Count, <#= minVarItems #>);

            switch (varItemCalculators.Count)
            {
<#
	for (int i = minVarItems; i <= maxVarItems; i++)
	{
#>
                case <#= i #>:
                    return new Add_OperatorCalculator_<#= i #>Vars_1Const
					(
<#
		for (int j = 0; j < i; j++)
		{
#>
						varItemCalculators[<#=j#>],
<#
		}
#>
						constValue
					);
<#
	}
#>
                default:
                    return new Add_OperatorCalculator_VarArray_1Const(varItemCalculators, constValue);
            }
        }
	}
}
*/